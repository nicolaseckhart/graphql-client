/* b7a28085a01c40b297364e2925837ffbf7aa9a96
 * This file is automatically generated by graphql-let. */

import * as Apollo from '@apollo/client'
export declare type Maybe<T> = T | null
export declare type Exact<
  T extends {
    [key: string]: unknown
  }
> = {
  [K in keyof T]: T[K]
}
export declare type MakeOptional<T, K extends keyof T> = Omit<T, K> &
  {
    [SubKey in K]?: Maybe<T[SubKey]>
  }
export declare type MakeMaybe<T, K extends keyof T> = Omit<T, K> &
  {
    [SubKey in K]: Maybe<T[SubKey]>
  }
/** All built-in and custom scalars, mapped to their actual values */
export declare type Scalars = {
  ID: string
  String: string
  Boolean: boolean
  Int: number
  Float: number
}
export declare type Query = {
  __typename?: 'Query'
  place?: Maybe<Place>
}
export declare type QueryPlaceArgs = {
  id: Scalars['String']
}
export declare type Place = {
  __typename?: 'Place'
  id: Scalars['ID']
  title: Scalars['String']
  addressLines?: Maybe<Array<Scalars['String']>>
}
export declare type PlaceQueryVariables = Exact<{
  id: Scalars['String']
}>
export declare type PlaceQuery = {
  __typename?: 'Query'
} & {
  place?: Maybe<
    {
      __typename?: 'Place'
    } & Pick<Place, 'id' | 'title' | 'addressLines'>
  >
}
export declare const PlaceDocument: Apollo.DocumentNode
/**
 * __usePlaceQuery__
 *
 * To run a query within a React component, call `usePlaceQuery` and pass it any options that fit your needs.
 * When your component renders, `usePlaceQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePlaceQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export declare function usePlaceQuery(
  baseOptions: Apollo.QueryHookOptions<PlaceQuery, PlaceQueryVariables>
): Apollo.QueryResult<
  PlaceQuery,
  Exact<{
    id: string
  }>
>
export declare function usePlaceLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<PlaceQuery, PlaceQueryVariables>
): Apollo.QueryTuple<
  PlaceQuery,
  Exact<{
    id: string
  }>
>
export declare type PlaceQueryHookResult = ReturnType<typeof usePlaceQuery>
export declare type PlaceLazyQueryHookResult = ReturnType<
  typeof usePlaceLazyQuery
>
export declare type PlaceQueryResult = Apollo.QueryResult<
  PlaceQuery,
  PlaceQueryVariables
>
